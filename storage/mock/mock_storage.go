// Code generated by MockGen. DO NOT EDIT.
// Source: program/storage (interfaces: Storage)

// Package mocks is a generated GoMock package.
package mocks

import (
	model "program/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mongo "go.mongodb.org/mongo-driver/mongo"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CloseClientDB mocks base method.
func (m *MockStorage) CloseClientDB() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseClientDB")
}

// CloseClientDB indicates an expected call of CloseClientDB.
func (mr *MockStorageMockRecorder) CloseClientDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseClientDB", reflect.TypeOf((*MockStorage)(nil).CloseClientDB))
}

// FindID mocks base method.
func (m *MockStorage) FindID(arg0 string) (model.Joke, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindID", arg0)
	ret0, _ := ret[0].(model.Joke)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindID indicates an expected call of FindID.
func (mr *MockStorageMockRecorder) FindID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindID", reflect.TypeOf((*MockStorage)(nil).FindID), arg0)
}

// Fun mocks base method.
func (m *MockStorage) Fun() ([]model.Joke, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fun")
	ret0, _ := ret[0].([]model.Joke)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fun indicates an expected call of Fun.
func (mr *MockStorageMockRecorder) Fun() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fun", reflect.TypeOf((*MockStorage)(nil).Fun))
}

// Random mocks base method.
func (m *MockStorage) Random() ([]model.Joke, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Random")
	ret0, _ := ret[0].([]model.Joke)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Random indicates an expected call of Random.
func (mr *MockStorageMockRecorder) Random() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Random", reflect.TypeOf((*MockStorage)(nil).Random))
}

// Save mocks base method.
func (m *MockStorage) Save(arg0 model.Joke) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockStorageMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStorage)(nil).Save), arg0)
}

// TextSearch mocks base method.
func (m *MockStorage) TextSearch(arg0 string) ([]model.Joke, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TextSearch", arg0)
	ret0, _ := ret[0].([]model.Joke)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TextSearch indicates an expected call of TextSearch.
func (mr *MockStorageMockRecorder) TextSearch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TextSearch", reflect.TypeOf((*MockStorage)(nil).TextSearch), arg0)
}

// UpdateByID mocks base method.
func (m *MockStorage) UpdateByID(arg0, arg1 string) (*mongo.UpdateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", arg0, arg1)
	ret0, _ := ret[0].(*mongo.UpdateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockStorageMockRecorder) UpdateByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockStorage)(nil).UpdateByID), arg0, arg1)
}
